// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository (interfaces: UrlRepository)
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./internal/mocks/reposiotry_mocks.go ./internal/repository UrlRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Bromolima/url-shortner-go/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUrlRepository is a mock of UrlRepository interface.
type MockUrlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepositoryMockRecorder
	isgomock struct{}
}

// MockUrlRepositoryMockRecorder is the mock recorder for MockUrlRepository.
type MockUrlRepositoryMockRecorder struct {
	mock *MockUrlRepository
}

// NewMockUrlRepository creates a new mock instance.
func NewMockUrlRepository(ctrl *gomock.Controller) *MockUrlRepository {
	mock := &MockUrlRepository{ctrl: ctrl}
	mock.recorder = &MockUrlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepository) EXPECT() *MockUrlRepositoryMockRecorder {
	return m.recorder
}

// FindByOriginalUrl mocks base method.
func (m *MockUrlRepository) FindByOriginalUrl(ctx context.Context, originalUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOriginalUrl", ctx, originalUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOriginalUrl indicates an expected call of FindByOriginalUrl.
func (mr *MockUrlRepositoryMockRecorder) FindByOriginalUrl(ctx, originalUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOriginalUrl", reflect.TypeOf((*MockUrlRepository)(nil).FindByOriginalUrl), ctx, originalUrl)
}

// FindByShortCode mocks base method.
func (m *MockUrlRepository) FindByShortCode(ctx context.Context, shortCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByShortCode", ctx, shortCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByShortCode indicates an expected call of FindByShortCode.
func (mr *MockUrlRepositoryMockRecorder) FindByShortCode(ctx, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByShortCode", reflect.TypeOf((*MockUrlRepository)(nil).FindByShortCode), ctx, shortCode)
}

// Save mocks base method.
func (m *MockUrlRepository) Save(ctx context.Context, url *model.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUrlRepositoryMockRecorder) Save(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUrlRepository)(nil).Save), ctx, url)
}
