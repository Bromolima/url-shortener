// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/hash_url.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHashUrlService is a mock of HashUrlService interface.
type MockHashUrlService struct {
	ctrl     *gomock.Controller
	recorder *MockHashUrlServiceMockRecorder
}

// MockHashUrlServiceMockRecorder is the mock recorder for MockHashUrlService.
type MockHashUrlServiceMockRecorder struct {
	mock *MockHashUrlService
}

// NewMockHashUrlService creates a new mock instance.
func NewMockHashUrlService(ctrl *gomock.Controller) *MockHashUrlService {
	mock := &MockHashUrlService{ctrl: ctrl}
	mock.recorder = &MockHashUrlServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashUrlService) EXPECT() *MockHashUrlServiceMockRecorder {
	return m.recorder
}

// DecodeUrl mocks base method.
func (m *MockHashUrlService) DecodeUrl(shortUrl string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeUrl", shortUrl)
	ret0, _ := ret[0].(string)
	return ret0
}

// DecodeUrl indicates an expected call of DecodeUrl.
func (mr *MockHashUrlServiceMockRecorder) DecodeUrl(shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeUrl", reflect.TypeOf((*MockHashUrlService)(nil).DecodeUrl), shortUrl)
}

// EncodeUrl mocks base method.
func (m *MockHashUrlService) EncodeUrl(originalUrl string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeUrl", originalUrl)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncodeUrl indicates an expected call of EncodeUrl.
func (mr *MockHashUrlServiceMockRecorder) EncodeUrl(originalUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeUrl", reflect.TypeOf((*MockHashUrlService)(nil).EncodeUrl), originalUrl)
}
